Spring security.

http.sessionManagement() - defines session management behaviour for http request.

SessionCreationPolicy.STATELESS - 
  (application will not create or use an HTTP session to store security-related information.
  Security is implemented without relying on server-side sessions, meaning:
    Each request is authenticated independently.
    Typically used in stateless applications (e.g., RESTful APIs).
    Authentication information (like a JWT) must be sent with every request.)
    
    
Allowed Headers - allowed headers that frontend can send to backend.
Exposed Headers = headers that backend will send in response to frontend.


OncePerRequestFilter - Filter that is applied once per request. Handy when working with multiple servlets.

Repo for jwt in springboot maven - https://github.com/jwtk/jjwt


Authentication starts from 'Authentication Provider' , it is in security config file with @Bean.
It implements something called DaoAuthenticationProvider which checks user credentials is stored in database or not and only if it is in database , it will allow you access.
We can set password encoder to encode it to a type to store in database as we cannot store raw passwords.
Then we call a very important called .setUserDetailsService. Here we should pass UserDetailsService class.

Make the custom implementation of UserDetailsService class , this has a method called loadByUsername (String username). this username comes from the name you enter in login form and then it checks in the repo
if any record of that username is available or not. If not available (null) it will throw exception , hence no acess. But if there is one, you need to return UserDetails (which is spirngsecurity way of visualizing user). So for this also you have to make a class implementing UserDetails. This class ties UserDetails with our custom user. 

If user is found , we create UserDetails object by passing our user which was found in repo.

If we only have AuthenticationProvider , it only tests the username and not the password. If the username is right you will gain access , how funny is that.

But why are we using authManager's New UserPasswordauthenticationTOken(username,password) to verify for login if we have AutheticationProvider self defined that can verify usrename password against database , this is because authManager under the hood uses our custom implementation!

Implementing jwt token. Every authentication after login must be verified with jwt token. On login it gives you jwt token , but why does not /login or /register require jwt token. Because in .requestMatchers("/login") .permitAll().

For other request that need to be authenticated. JwtFilter() is added before UserNamePasswordAuthentication Filter. so it will authenticate with jwt token.

In jwt filter , first we strip bearer token from the header. and then validate (validate function in jwtUtils) , after validating create a username password authentication token and set it to security context to allow passing through jwt key.

Since userName password authentication token is set to security context holder , it no longer redirects to login form for the username password authentication token , becuase we create it after validation and pass to security context.



Implementing Oauth. First go to your provider (our's github.) make client id , client-secret and scope. scope is what your app can do in user's account. 

You need to exchange a code for access token to access user's repo and all but getting the code and exchanging is very hard in spring security if you try to do manually.

Just load the current client by passing oauth2 authentication token (this is automatically provided) and give clientRegistrationId - "github" , it will load client in client type. Then you can do client.getAccessToken().getValue()


While mapping the repositories jsonffrom github api , just map it in a class with @JsonProperty(property name) and if it is a list coming up then just put a [] in ResponseEntity.

ObjectOptimisticLockingFailure : Happens when a version of entity has already been transacted and now i try to update again. Solve with @Version. But the problem was more like i was trying to save into same repositoryModel instance everytime. So , i just placed it in the loop.

The problem was i was setting .getGithubRepoId to Primary key which already had generated value. Since two updates were happening on same time on same field , object locking occured.

FetchSaveRepositories is running from OAuthSuccessionHandler , meaning it does not fetch on every refresh but instead on every login new data is fetched. This is to save calls.

CascadeType.ALL works only within JPA/Hibernate's context. When you delete a parent entity (e.g., TheUser) using JPA, Hibernate knows to cascade the DELETE operation to associated child entities (e.g., GithubRepoEntity) because it manages the entity lifecycle. However, deleting directly in the database bypasses JPA/Hibernate, so it does not trigger cascade operations or lifecycle hooks like orphanRemoval.

In many to many mapping , you cant directly join column , make a new join table that shows the relation.

Also use child entities after saving the user. For instance i called githubFetchSaveService (which fetches github repositories of the user before saving the user in OAuth2SuccessionHandler) causing the repositories to be fetched but the user was not fetched so the mapped columns were null first login , only on the second login there was masterUser and id assosciated.

to reference parent id column , first reference the field name of the parent in the entity. For here it's theUser 'masterUser' , then the field inside theUser you want to find by

Be very careful in checking everytime , when you add things to database because mappings can be doubled every login and create duplicates in database. Be sure to keep checks if it already exists when you add.

Finally understood DTO Clearly. Whenever you want to send client data into service class , you dont directly request body a entity but make a data transfer object that looks similar to entity and pass from there. Also You may not want to expose all entity fields to the client.

needed double check at repositoryentity creating all collection because just checking by masterUserUsername was returning many repoCollectionsEntity and i wanted to only check if All repositories is assosciated with that user.

Incorrect size exception usually occurs when repository jpa method is designed to return one element but multiple elements are being returned from database.

From react its very easy to redirect from login with XYZ : just on onClick function: window.href = http://localhost:8080/oauth2/authorization/XYZ.

I am using typescript for this project for typesafety , it is one of the first times i am using unlike springboot and spring security. So i will document every step.
First is the type AxiosInstance , it contains predefined set of axios types and does not allow you to call wrong methods.

When doing with oauth , you should put withCredentials: true in requests to allow access header control or something.

Through defining abortController never see outdated data. If i make two requests like there is a button for 1 and 2 , i am clicking 1 and data is loading but i suddenly click 2 and data 1 is still processing then it aborts 1 and goes on 2. This can be seen while clicking youtube videos , when i click on one and it is loading but while loading if i click another thumbnail , it loads that. 

passing the data like {url: 'fkdsf' , someproperty: 'someproperty'} looks super convenient , it is known as destructuring an object and in arguments besides function call also you should make object accept it like the same way function_name({url , someprpoerty})

Strategy to gain user details after authentication: my approach is that right after authenticating backend redirects to / so in / use an useEffect that fetches authenticated user details from /easyrepo/user and then store those in context api and pass it through out application.

I had hard time working with context apis so i just decided to pass props. Yeah not a good idea but i will keep it minimal for sure. Protected routes will help me pass authenticated state only one time other than that , i just need to pass userDetails wherever i want , i hope that's the only state i will pass on this application.

Session storage persists across session , local persists even after browser is closed. i used session so that it becomes easier to force users to login every session Oauth style.

403 Error on post usually happens if you forget to pass csrf token.

When you send data from springboot backend to frontend , you usually send an @Entity , there is a class and there are fields. These fields and their data are automatically serialized by Springboot backend through the help of @RequestBody annotation. It is included in the @RestController annotation. How cool.

In postman whenever you get something , if there are mapping especially many relations , you will most probably get repeated results of some value, use @JsonBackReference by diagnosing the field it is happening on.

Use env files man, helps a lot on all these changing environments.

Since github username can be changed and my backend processes all these information by checking username , i know this is a bad practice and i should migrate this system to githubProvider id.

?. is called optional chaining in javascript , way of handling null value. Terminology.

@JsonIgnore to the fields you dont want to send. Like password.

I have made a utility service class to get the authenticated username. It could be easy as just getting security context holder and get authenticated username but not that easy when oauth2 is involved so ..... 


There is no orphanRemoval in many to many relationships.

If sometimes you cannot use .get even after having lombok or getters , just see if the class is private man.

Sometimes csrf can return null. Just see if you have disabled it previously to run tests.

And sometimes data cannot be fetched due to backReference issue.

git reset --soft HEAD~1  (Remove last commit but does not undo the changes.)

I have used object mapper and jsonnode way to get sha key deserialization instead of @JsonProperty because the traditional response model was taking way too much time.

@PostConstruct is used when one bean needs to completely intialized and set so that it can be used in program. This helps prevent running the dependent part of code before the part it is dependent on.

Field injection is not reccomended! I had been using field injection all the way and it is not reccomended because of testing challenges and hidden transparency.

Use static classes when the class is Independent of Outer Class Instance but still relates to it somehow. A static class doesnot hold implicit reference of outer class.


Problem in tree Structure implementation is : if two files named same are present in the tree then all files will be assigned in the first file because second file is not stored due to hashmap. Only one is stored.

Whenever data is serialized to json , there is high chance of recursion in parent-child relationships. Recognize getter setters and add @JsonIgnore. for this type of issue.


