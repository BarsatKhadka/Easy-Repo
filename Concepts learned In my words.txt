Spring security.

http.sessionManagement() - defines session management behaviour for http request.

SessionCreationPolicy.STATELESS - 
  (application will not create or use an HTTP session to store security-related information.
  Security is implemented without relying on server-side sessions, meaning:
    Each request is authenticated independently.
    Typically used in stateless applications (e.g., RESTful APIs).
    Authentication information (like a JWT) must be sent with every request.)
    
    
Allowed Headers - allowed headers that frontend can send to backend.
Exposed Headers = headers that backend will send in response to frontend.


OncePerRequestFilter - Filter that is applied once per request. Handy when working with multiple servlets.

Repo for jwt in springboot maven - https://github.com/jwtk/jjwt


Authentication starts from 'Authentication Provider' , it is in security config file with @Bean.
It implements something called DaoAuthenticationProvider which checks user credentials is stored in database or not and only if it is in database , it will allow you access.
We can set password encoder to encode it to a type to store in database as we cannot store raw passwords.
Then we call a very important called .setUserDetailsService. Here we should pass UserDetailsService class.

Make the custom implementation of UserDetailsService class , this has a method called loadByUsername (String username). this username comes from the name you enter in login form and then it checks in the repo
if any record of that username is available or not. If not available (null) it will throw exception , hence no acess. But if there is one, you need to return UserDetails (which is spirngsecurity way of visualizing user). So for this also you have to make a class implementing UserDetails. This class ties UserDetails with our custom user. 

If user is found , we create UserDetails object by passing our user which was found in repo.

If we only have AuthenticationProvider , it only tests the username and not the password. If the username is right you will gain access , how funny is that.

But why are we using authManager's New UserPasswordauthenticationTOken(username,password) to verify for login if we have AutheticationProvider self defined that can verify usrename password against database , this is because authManager under the hood uses our custom implementation!

Implementing jwt token. Every authentication after login must be verified with jwt token. On login it gives you jwt token , but why does not /login or /register require jwt token. Because in .requestMatchers("/login") .permitAll().

For other request that need to be authenticated. JwtFilter() is added before UserNamePasswordAuthentication Filter. so it will authenticate with jwt token.

In jwt filter , first we strip bearer token from the header. and then validate (validate function in jwtUtils) , after validating create a username password authentication token and set it to security context to allow passing through jwt key.

Since userName password authentication token is set to security context holder , it no longer redirects to login form for the username password authentication token , becuase we create it after validation and pass to security context.



Implementing Oauth. First go to your provider (our's github.) make client id , client-secret and scope. scope is what your app can do in user's account. 

You need to exchange a code for access token to access user's repo and all but getting the code and exchanging is very hard in spring security if you try to do manually.

Just load the current client by passing oauth2 authentication token (this is automatically provided) and give clientRegistrationId - "github" , it will load client in client type. Then you can do client.getAccessToken().getValue()


While mapping the repositories jsonffrom github api , just map it in a class with @JsonProperty(property name) and if it is a list coming up then just put a [] in ResponseEntity.

ObjectOptimisticLockingFailure : Happens when a version of entity has already been transacted and now i try to update again. Solve with @Version. But the problem was more like i was trying to save into same repositoryModel instance everytime. So , i just placed it in the loop.

The problem was i was setting .getGithubRepoId to Primary key which already had generated value. Since two updates were happening on same time on same field , object locking occured.

FetchSaveRepositories is running from OAuthSuccessionHandler , meaning it does not fetch on every refresh but instead on every login new data is fetched. This is to save calls.

CascadeType.ALL works only within JPA/Hibernate's context. When you delete a parent entity (e.g., TheUser) using JPA, Hibernate knows to cascade the DELETE operation to associated child entities (e.g., GithubRepoEntity) because it manages the entity lifecycle. However, deleting directly in the database bypasses JPA/Hibernate, so it does not trigger cascade operations or lifecycle hooks like orphanRemoval.

